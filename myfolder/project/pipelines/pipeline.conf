input {
#	file {
#		path => "/home/achliopa/workspace/udemy/logstash/myfolder/project/event-data/apache_*.log"
#		start_position => "beginning"
#		type => "access"
#	}

	http {
#		type => "access"
	}
}

filter {
	
	if [headers][request_uri] =~ "error" or [path] =~ "errors" {
		mutate {
			replace => { type => "error"}
		}
	} else {
		mutate {
			replace => { type => "access"}
		}

		grok {
			match => { "message" => "%{HTTPD_COMMONLOG} %{GREEDYDATA:referrer} %{GREEDYDATA:agent}"}
		}

		if "_grokparsefailure" in [tags] {
			drop { }
		}

		mutate {
			convert => {
				"response" => "integer"
				"bytes" => "integer"
			}
		}

		date {
			match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
			remove_field => ["timestamp"]
		}
	}

#	grok {
#		match => { "message" => "%{IP:ip_address} %{USER:identity} %{USER:auth} \[%{HTTPDATE:req_ts}\] \"%{WORD:http_verb} %{URIPATHPARAM:req_path}\" %{INT:http_status:int} %{INT:num_bytes:int}" }
#		match => { "message" => "%{HTTPD_COMBINEDLOG}"}
#		match => { "message" => "%{HTTPD_COMMONLOG} %{GREEDYDATA:referrer} %{GREEDYDATA:agent}"}
#	}

#	mutate {
#		gsub => [
#			"agent", '"', "",
#			"referrer", '"', ""
#		]
#	}

#	mutate {
#		convert => {
#			"response" => "integer"
#			"bytes" => "integer"
#		}
#	}

#	date {
#		match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
#		remove_field => ["timestamp"]
#	}
}

output {
	stdout {
		codec => rubydebug
	}

	file {
		path => "%{type}_%{+yyyy-MM-dd}.log"
	}
}